# -*- coding: utf-8 -*-
"""Classify_Helper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A9YYnI61dqdRiPatyPmxgtHBBKsuuXvN
"""

import numpy as np
import pandas as pd
import numbers 
import pickle
import sklearn
from sklearn.cluster import KMeans

Ed_Exp = pd.read_csv('Education_Experience.csv')
Ed_Exp.head()

input_cluster_list1 = [
                        [9, "Statisticians"], 
                        [9, "Database Architects"],
                        [9, "Software Quality Assurance Engineers and Testers"],
                        [9, "Computer User Support Specialists"],
                        [9, "Mathematical Technicians"],
                        [9, "Computer Systems Analysts"],
                        [9, "Web Developers"], 
                        [9, "Software Developers, Applications"],
                        [9, "Computer Programmers"],
                        [9, "Electronic Drafters"]
                    ]

input_cluster_list2 = [
                        [77, "Information Security Analysts"], 
                        [77, "Telecommunications Engineering Specialists"],
                        [77, "Computer Network Architects"],
                        [77, "Computer Systems Engineers/Architects"],
                        [77, "Database Administrators"], 
                        [77, "Software Developers, Systems Software"],
                        [77, "Computer Network Support Specialists"], 
                        [77, "Network and Computer Systems Administrators"]
                    ]

loaded_model = pickle.load(open('kmeans_knowledge_cluster.sav', 'rb'))

test_data = pd.read_csv("test_data.csv") 
test_data.head()

expected_target=test_data["Title"]
input_data=test_data.drop("Title",axis=1)
feature_name=test_data.columns

print(expected_target)
print(input_data)
print(feature_name)

test_data=test_data.drop("Title",axis=1)
test_data.head()

read_cluster_grouping = pd.read_csv("KnowledgeCleansed_Clusters.csv")
cluster_group_df = read_cluster_grouping.set_index("Class")

cluster_group_df.head()

print(cluster_group_df.index)

result = loaded_model.predict(test_data)
print("The test data belongs to Class: ", result[0])

selected_title_group =cluster_group_df.loc[cluster_group_df.index==result[0]]
print("The jobs are:",selected_title_group.values)

selected_title_group.head()

#Convert to array of arrays

title_list = selected_title_group["Title"]

print(title_list)

print("******List of Titles parsed out*********")
for title in title_list:
    print(title)
print("******End of List of Titles parsed out********")

Ed_Exp = pd.read_csv('Education_Experience.csv')
Ed_Exp.head()

Ed_Exp_filtered = pd.DataFrame(Ed_Exp[Ed_Exp["Title"].isin(title_list)])

Ed_Exp_filtered.head(50)


Ed_Exp_filtered['Score'] =((Ed_Exp_filtered['Education Level'] * Ed_Exp_filtered['Data Value_Education']) +
                           (Ed_Exp_filtered['Work Experience Level'] * Ed_Exp_filtered['Data Value_Experience']))


Ed_Exp_filtered.head()

while True:
    try:
        print("*****Education Level**************")
        print ("1 - Less than High School Diploma")
        print ("2 - High School Diploma")
        print ("3 - Post Secondary Certificate")
        print ("4 - Some College Course")
        print ("5 - Associate's Degree")
        print ("6 - Bachelors's Degree")
        print ("7 - Post-Baccalaureate Certificate")
        print ("8 - Master's Degree")
        print ("9 - Post-Master's Certificate")
        print ("10 - First Professional Degree")
        print ("11 - Doctoral Degree")
        print ("12 - Post-Doctoral Training")
        print("******End of Education Levels*******")
        ed_level = int(input("Please enter suitable Education Level (1-12):"))
    except ValueError:
        print("Sorry, I didn't understand that.")
       
        continue
    else:
        break

print(f"Education Level: {ed_level}")

while True:
    try:
        print("*******Experience Level***********")
        print ("1 - No experience")
        print ("2 - Upto 1 month experience")
        print ("3 - (1-3 months) experience")
        print ("4 - (3-6 months) experience")
        print ("5 - (6 months - 1 year) experience")
        print ("6 - (1-2 years) experience")
        print ("7 - (2-4 years) experience")
        print ("8 - (4-6 years) experience")
        print ("9 - (6-8 years) experience")
        print ("10 - (8-10 years) experience")
        print ("11 - (> 10 years) experience")
        print("*******End of Experience Level******")
        exp_level = int(input("Please enter suitable Experience Level (1-11):"))
    except ValueError:
        print("Sorry, I didn't understand that.")
        
        continue
    else:
        break

print(f"Experience Level: {exp_level}")

current_title = str(input("Please enter current title:"))


print(f"Current Title: {current_title}")

print(f"Education Level: {ed_level}")
print(f"Experience Level: {exp_level}")
print(f"Current Title: {current_title}")

user_ed_list = [ed_level]
user_exp_list = [exp_level]

Ed_Exp_User_filtered = pd.DataFrame(Ed_Exp_filtered[(Ed_Exp_filtered["Education Level"].isin(user_ed_list)) & 
                                                (Ed_Exp_filtered["Work Experience Level"].isin(user_exp_list))])

Ed_Exp_User_filtered.head(50)

Curr_Title_user_filtered = pd.DataFrame()
Title_Empty = False

if (not current_title): 
    Title_Empty = True
    curr_user_title_list = [current_title]
    Curr_Title_user_filtered = Ed_Exp_filtered[(Ed_Exp_filtered["Title"].isin(curr_user_title_list))]


Curr_Title_user_filtered.head()

Alternate_Titles = pd.read_csv('AlternateTitles.csv')
Alternate_Titles.head()

AltTitles_pd = Alternate_Titles[['Title', 'Alternate Title', 'Short Title']]

AltTitles_pd.head()

curr_user_title_list = [current_title]

mapping_title = pd.DataFrame()

if ((Curr_Title_user_filtered.empty == True) and (Title_Empty == False)):
   
    mapping_title = AltTitles_pd[(AltTitles_pd["Alternate Title"].isin(curr_user_title_list))]


mapping_title = mapping_title.reset_index(drop=True)

mapping_title.head()

Alternate_titles = mapping_title["Title"]

print(Alternate_titles)

Ed_Exp_User_Ordered = Ed_Exp_User_filtered.sort_values(by='Score', ascending=False)

Ed_Exp_User_Ordered.head(20)

for index, row in Ed_Exp_User_Ordered.iterrows():
    print (row['Title'], row['Education'], row['Work Experience'])

Additonal_JobTitle_Details = pd.read_csv('occupation.csv')
Additonal_JobTitle_Details.head()

JobDetails_pd = Additonal_JobTitle_Details[['Title', 'Description', 'Technology', 'CoreTasks']]

JobDetails_pd.head()

final_scored_title_list = pd.merge(Ed_Exp_User_Ordered, JobDetails_pd, on ='Title')

final_scored_title_list.head(20)